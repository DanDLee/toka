2 import strcpy    #! char *strcpy(char *dest, const char *src)
3 import strncpy   #! char *strncpy(char *dest, const char *src, size_t n)
2 import strcat    #! char *strcat(char *dest, const char *src)
3 import strncat   #! char *strncat(char *dest, const char *src, size_t n)
2 import strcmp    #! int strcmp(const char *s1, const char *s2)
3 import strncmp   #! int strncmp(const char *s1, const char *s2, size_t n)
2 import strchr    #! char *strchr(const char *s, int c)
2 import strrchr   #! char *strrchr(const char *s, int c)
2 import strstr    #! char *strstr(const char *haystack, const char *needle)
1 import strlen    #! size_t strlen(const char *s)
2 import strtok    #! char *strtok(char *str, const char *delim)

2 chars is-array $[cr]
13 0 $[cr] array.putChar
2 chars is-array $[lf]
10 0 $[lf] array.putChar

[ >r count r> + malloc swap strcpy ] is string.grow
[ swap count 1 + string.grow swap strcat ] is string.append 
[ $[cr] string.append ] is +cr
[ $[lf] string.append ] is +lf

[ 1 string.grow ] is string.clone

[ swap string.clone swap strtok ] is string.findToken
[ swap string.clone swap strstr ] is string.findSubstring
[ swap string.clone swap strchr ] is string.findChar

[ char: " parse swap string.append
  compiler @
  [ count dup malloc dup # swap copy ]
  ifTrue
] is after-"
