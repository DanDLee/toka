#! /usr/bin/toka
#! A small Forth interpreter written in Toka.
#! ==========================================================
#! Objective:
#!   Implement a dialect of Forth (non-ANS compliant, but it
#!   should follow the ANS standard when possible) in Toka.
#! ==========================================================
#! Done so far:
#!   : ; ;immediate s" type for next \ .s if else then
#!   unpack parse see
#!
#! Buggy:
#!
#! Things from Toka that need no changes:
#!   words
#!   variable value to @ ! +! -! dup drop swap rot over 2dup
#!   2drop tuck nip = < > <> bye emit + - * /mod / mod 
#!   on off toggle >> << not negate and or xor clear cr
#! ==========================================================
#!   REV      DATE       NOTES
#! ----------------------------------------------------------
#!    -     20070621     Implementation begins
#!          20070824     Minor tweaks; Added comments
#! ==========================================================

#! ==========================================================
#! In Forth, words are normally created using a form like:
#!    : wordname  ( stack comment )  definition ;
#!
#! To provide this, we need to:
#!    1) Have : parse for a name, and start a new quote for
#!       the definition
#!    2) Stack comments are already supported in Toka
#!    3) Have ; close the quote, and then disable the parser,
#!       attach the name from :, and then reenable the parser
#!
#! Optionally, in Forth, words can be marked as IMMEDIATE,
#! which corresponds to the Toka is-macro form. We provide
#! ';immediate' instead of '; immediate' to keep things
#! simple.
#! ==========================================================
[ wsparse ` [ invoke ] is :
[ ` ] invoke parser off swap is parser on ] is-macro ;
[ ` ] invoke parser off swap is-macro parser on ] is-macro ;immediate
` [ is-macro for
[ ` ] invoke ` iterate compile ] is-macro next

#! ==========================================================
#! This provides s", which allows creation of Forth style 
#! strings (address/count pairs).
#! ==========================================================
: s" escape-sequences on
  ` " invoke dup string.getLength compiler @ [ $# ] ifTrue 
  escape-sequences off
;immediate


#! ==========================================================
#! Within the context of Forth, strings are passed as dual
#! elements: a pointer and the actual number of bytes. In
#! Toka, they are passed as just a pointer. The following are
#! wrappers to make some words using strings accept Forth
#! type rather than Toka type.
#! ==========================================================
: unpack dup string.getLength ;
: type for dup c@ emit char+ next drop ;
: parse parse unpack ;


#! ==========================================================
#! Forth style conditionals take a form like:
#!   FLAG if ...true... else ...false... then
#!
#! This provides a set of wrappers that translate the Forth
#! form to Toka-style quoted conditionals using ifTrueFalse.
#! ==========================================================
: if FALSE ` [ invoke ;immediate
: else ` ] invoke drop TRUE ` [ invoke ;immediate
: then ` ] invoke [ ` ifTrueFalse compile ] [ ` ifTrue compile ] ifTrueFalse ;immediate


#! ==========================================================
#! These are just some thin wrappers to provide more 
#! traditional names for some functionality.
#! ==========================================================
: .s :stack ;
: \\ lnparse drop ;immediate
: see ` ` invoke :see ;

escape-sequences off
