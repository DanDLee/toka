[ 10 parse drop ] is #!

#! ---------------------------------------
#! Constants for various ASCII values
#! ---------------------------------------
[ 32 ] is SPACE
[ 10 ] is CR
[ 13 ] is LF
[ 27 ] is ESC
[  9 ] is TAB


#! ---------------------------------------
#! Parsing extensions
#! ---------------------------------------
[ SPACE parse ] is wsparse
[ CR parse ] is lnparse


#! ---------------------------------------
#! Conditionals
#! ---------------------------------------
[  0 ] is FALSE
[ -1 ] is TRUE
[ [ ] t/f ] is true?
[ [ ] swap t/f ] is false?


#! ---------------------------------------
#! Obtaining Character
#! ---------------------------------------
[ 255 and ] is >char
[ SPACE parse @ >char
  compiler @ [ # ] true?
] is-super char:


#! ---------------------------------------
#! Strings
#! ---------------------------------------
[ char: " parse
  compiler @
  [ count dup malloc dup # swap copy ]
  true?
] is-super "


#! ---------------------------------------
#! Output
#! ---------------------------------------
[ CR LF emit emit ] is cr
[ SPACE emit ] is space
[   TAB emit ] is tab
[ lnparse type cr ] is t:

[ ESC emit type ] is ^esc
[ " [2J" ^esc 
  " [1;1H" ^esc 
] is clear


#! ---------------------------------------
#! Stack manipulation
#! ---------------------------------------
[ swap drop ] is nip
[ >r swap r> swap ] is rot
[ swap >r swap r> ] is -rot
[ >r dup r> swap ] is over
[ dup -rot ] is tuck
[ over over ] is 2dup
[ drop drop ] is 2drop
[ depth [ drop ] iterate ] is reset
[ r> dup >r ] is r@


#! ---------------------------------------
#! Math
#! ---------------------------------------
[ 1 + ] is 1+
[ 1 - ] is 1-
[ -1 * ] is negate
[ /mod nip ] is /
[ /mod drop ] is mod
[ -1 xor ] is not
[ swap >r / r> * ] is */


#! ---------------------------------------
#! Memory and Variables
#! ---------------------------------------
[ char-size * ] is chars
[ char-size + ] is char+
[ char-size - ] is char-
[ cell-size * ] is cells
[ cell-size + ] is cell+
[ cell-size - ] is cell-
[ dup @ rot + swap ! ] is +!
[ dup @ rot - swap ! ] is -!
[ -1 swap ! ] is on
[  0 swap ! ] is off
[ dup @ not swap ! ] is toggle
[ cell-size malloc is-data ] is variable


#! ---------------------------------------
#! Numeric bases
#! ---------------------------------------
[ 16 base ! ] is hex
[ 10 base ! ] is decimal
[  2 base ! ] is binary
[  8 base ! ] is octal


#! ---------------------------------------
#! File I/O
#! ---------------------------------------
[ 1 ] is "R"
[ 2 ] is "R+"
[ 3 ] is "W"
[ 4 ] is "W+"
[ 5 ] is "A"
[ 6 ] is "A+"
[ 1 ] is START
[ 2 ] is CURRENT
[ 3 ] is END

[ "R" file.open dup dup
  file.size 1 + dup malloc dup >r swap
  file.read drop 
  file.close r>
] is file.slurp


#! ---------------------------------------
#! Arrays
#! ---------------------------------------
[ malloc is-data ] is is-array
[ swap cell-size * + @ ] is get-element
[ swap cell-size * + ! ] is put-element
[ swap char-size * + c@ ] is get-char-element
[ swap char-size * + c! ] is put-char-element


#! ---------------------------------------
#! Other
#! ---------------------------------------
[ wsparse :include ] is include
[ wsparse :needs ] is needs


#! ---------------------------------------
#! Help
#! ---------------------------------------
[ 
  cr
  " help         Display this text" type cr
  " :words       Display a list of words" type cr
  " :stack       Display the current data stack contents" type cr
  " :gc          Display information about the current memory usage" type cr
  " :see         Decompile a quote (passed on the stack)" type cr
  " \ <word>     Return a quote. If the requested word is a primitive" type cr
  "              or data structure, return the name in a new quote." type cr
  cr
] is help
