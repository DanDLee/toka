#! /usr/bin/toka 
#! --------------------------------------------------------------- 
#! HTTP Based Listener
#!
#! This is a simple http server designed to run a basic listener.
#! At present it serves as a documentation tool. It is possible to
#! obtain documentation on any basic word in Toka using this.
#!
#! Eventually I hope to have it accept code and run it in a separate
#! process.
#! --------------------------------------------------------------- 


{
  ." -------------------------------------- Loading Libraries...\n"
  needs strings
  needs sockets
  needs shell
  needs case

  needs helpdb
  include help.toka

  from libc.so.6
  3 import memset     #! void *memset(void *s, int c, size_t n);

  ." -------------------------------------- Preparing Server...\n"
  1024 chars is-data 1KiB
  1KiB is-array buffer
  [ buffer 0 1KiB memset reset ] is reset

  variable| socket connection |
  9812 pBind socket !
  [ socket @ pAccept connection ! ] is new-connection
  [ connection @ pClose ] is end-connection
  [ >r connection @ r> count char- pWrite drop ] is send

  ." -------------------------------------- Preparing Request Handler...\n"
  [ connection @ buffer 1KiB pRead ] is get-request
   " \n "  is-data DELIMS
  [
    buffer " /" string.findSubstring char+ 
    DELIMS string.findToken
  ] is extract-filename


  ." -------------------------------------- Preparing Request Handler...\n"


  " <html>
      <head>
        <title>Toka: Listener</title>
        <style>
          .name { padding: 5px; background: #E0DDD2; width: 600px%; font-size: 18pt; font-family: sans-serif; font-style: normal; font-weight: bold; }
          .stack { padding: 5px; background: #F2E5DD; font-size: 14pt; font-family: sans-serif; font-style: normal; }
          .description { padding: 5px; background: #F5E9C8; font-size: 12pt; font-family: sans-serif; font-style: normal; }
        </style>
      </head>
      <body>
  " is-data PREAMBLE

  [ ( - ) PREAMBLE send ] is html-begin
  [ ( - ) " </body></html>" send ] is html-end

  [ ( - ) " <form id=\"main\" action=\"browse\" method=\"get\">\n" send ] is form-begin
  [ ( - ) " </form>\n" send ] is form-end

  2 chars is-array output
  value source
  [ ( $- )
    dup to source
    count char- nip
    [
      i char- source array.getChar   
      switch
        char: < [ " &lt;" send break ] case
        char: > [ " &gt;" send break ] case
        char: & [ " &amp;" send break ] case
        [ <cond> 0 output array.putChar output send ] default 
    ] +iterate
  ] is send-with-escapes
  [ ( $- )  extract-filename count 13 chars > [ 12 chars + ] ifTrue
            over strcmp 0 = 
            [ " <option selected='selected'>" send send-with-escapes " </option>" send ] 
            [ " <option>" send send-with-escapes " </option>" send ] ifTrueFalse
  ] is <option>


  [ ( - )
    " <select name=\"word\" style=\"width: 200px;\" size=\"20\" onchange=\"javascript:document.getElementById('main').submit();\">\n" send
    last @ [ i :name <option> ] iterate
    " </select>\n" send
  ] is select-word

  [ extract-filename count 13 chars > [ 12 chars + ] ifTrue :getHelp send ] is display-help

  [ html-begin
    form-begin
    " <table width='800px'>\n<tr><td width='200px'>" send
    select-word
    " </td><td valign=top width='600px'>" send 
    display-help " </td>" send
    " </tr></table>" send
    form-end
    html-end
  ] is send-table


  ." -------------------------------------- Main Loop...\n"

  [ new-connection
    get-request 
    send-table
    end-connection
    reset
    TRUE
  ] keep
}
 whileTrue
bye
